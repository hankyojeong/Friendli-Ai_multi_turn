{
  "question": "2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?",
  "llm_answer": "<think>\nOkay, let's tackle this user question. The user is asking for the age distribution of long-term foreign residents in Hwasung City, Gyeonggi Province in April 2025. \n\nFirst, I need to check the provided metadata. The table name is 2_tb_long_term_foreigners_by_region. The relevant columns are table_nm, sido, sigungu, adong, gender, age, cert, nat_nm, cnt, base_ym, and gbn. The value aliases mention that age should be reclassified into ranges like '0~9세', '10~19세', etc. Also, the table_nm for age is '4'.\n\nThe user's question specifies the region as Gyeonggi Hwasung-si and the time as April 2025. Since the data might be stored with base_ym in a format like 'YYYYMM', I need to normalize that. The base_ym should be '202504' for April 2025. \n\nThe region matching policy says to use_upper_trim, so I'll need to check for both '경기' and '경기도' for sido, and '화성' and '화성시' for sigungu. Also, the table_nm should be '4' as per the policy for age distribution.\n\nI need to filter the records where table_nm is '4', base_ym is '202504', sido is Gyeonggi, and sigungu is Hwasung. Then, group by the age ranges and sum the cnt. The age column needs to be transformed into the specified ranges. \n\nWait, how to handle the age categorization? The metadata says to reclassify age values into '0~9세', etc. So I need to create a CASE statement in SQL that maps the age values to these ranges. For example, if the age is '0', it falls into '0~9세', and so on. Also, '80세이상' would be for ages 80 and above.\n\nThe final output should have the age range and the count of foreigners. Also, ensure that the sum is NULL-safe using COALESCE. Also, the gbn (long-term category) isn't specified, but the user didn't mention it, so maybe include all categories or check if there's a default. However, the user might want all, so perhaps no filter on gbn unless specified. Wait, the user is asking for long-term foreign residents, which might be covered by the table's data. Since the table includes gbn, but the question doesn't specify, maybe we need to include all gbn values or check if there's a standard. But the user's question is about the age distribution regardless of gbn, so perhaps sum all gbn. However, the original data might have different categories, but the user didn't specify, so we can leave it as is. \n\nPutting it all together: select the age ranges, sum the cnt, filter by the correct region, time, and table_nm. Then order by age range. Also, ensure that the SQL uses the correct aliases for sido and sigungu. \n\nSo the SQL will have a CASE statement for age categorization, filters on the region using the aliases, and base_ym. Then group by the age category and order accordingly. Also, use COALESCE to handle any possible NULLs in the sum.\n</think>\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"2_장기체류외국인_지역별_현황.csv\"\nTBL_RAW = \"2_tb_long_term_foreigners_by_region\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 202504 기준 경기 화성시, table_nm=4(연령대)인 데이터의 연령대별 합계\nsql = '''\nSELECT\n  CASE\n    WHEN \"age\" BETWEEN '0' AND '9' THEN '0~9세'\n    WHEN \"age\" BETWEEN '10' AND '19' THEN '10~19세'\n    WHEN \"age\" BETWEEN '20' AND '29' THEN '20~29세'\n    WHEN \"age\" BETWEEN '30' AND '39' THEN '30~39세'\n    WHEN \"age\" BETWEEN '40' AND '49' THEN '40~49세'\n    WHEN \"age\" BETWEEN '50' AND '59' THEN '50~59세'\n    WHEN \"age\" BETWEEN '60' AND '69' THEN '60~69세'\n    WHEN \"age\" BETWEEN '70' AND '79' THEN '70~79세'\n    WHEN \"age\" >= '80' THEN '80세이상'\n    ELSE '기타'\n  END AS age_range,\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\nFROM {Q_TBL}\nWHERE UPPER(TRIM(\"table_nm\")) = '4'\n  AND (\n    UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR \n    UPPER(TRIM(\"sido\")) LIKE '경기%'\n  )\n  AND (\n    UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR \n    UPPER(TRIM(\"sigungu\")) LIKE '화성%'\n  )\n  AND REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','') = '202504'\nGROUP BY age_range\nORDER BY \n  CASE age_range\n    WHEN '0~9세' THEN 1\n    WHEN '10~19세' THEN 2\n    WHEN '20~29세' THEN 3\n    WHEN '30~39세' THEN 4\n    WHEN '40~49세' THEN 5\n    WHEN '50~59세' THEN 6\n    WHEN '60~69세' THEN 7\n    WHEN '70~79세' THEN 8\n    WHEN '80세이상' THEN 9\n    ELSE 10\n  END\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. payload(메타+질문)를 보고,\n**오직 하나의** 파이썬 코드블록만 출력한다. 그 코드블록은 SQLite로 **단 하나의 SQL 쿼리**를 실행하고,\n그 결과만 stdout에 출력한다. 설명/해설/추가 텍스트 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 2_장기체류외국인_지역별_현황.csv\n- table_name = 2_tb_long_term_foreigners_by_region\n- description = 장기체류 외국인 중 등록외국인과 외국국적동포의 거소현황을 집계한 데이터. table_nm 컬럼을 기준으로 국적(1), 체류자격(2), 행정동(3), 연령대(4)로 구분되어 있음.\n- meta_description =\n\n- table_nm: 원본 테이블명 (문자형) (데이터 구분용: 1.국적, 2.체류자격, 3.행정동, 4.연령대)\n- sido: 시도 (문자형)\n- sigungu: 시군구 (문자형)\n- adong: 행정동 (문자형)\n- gender: 성별 (문자형)\n- age: 나이 (문자형)\n- cert: 체류자격 (문자형)\n- nat_nm: 국적 (문자형)\n- cnt: 외국인 수 (정수형)\n- base_ym: 기준년월 (문자형)\n- gbn: 장기체류구분 (문자형)\n\nvalue_alias:\n  sido:\n    경기: ['경기도', '경기']\n  sigungu:\n    화성: ['화성시', '화성']\n  gbn:\n    거소외국인: ['외국국적동포']\n    등록외국인: ['등록외국인']\n  age:\n    age value들을보고 '0~9세', '10~19세', ..., '70~79세', '80세이상' 으로 알아서 재 분류.     \n\npolicies:\n  region_match: use_upper_trim\n  table_nm_age: '4'\n\n- user_question = 2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?\n\n[HARD OUTPUT RULES]\n1) 출력은 정확히 하나의 코드블록: 시작 ```python, 끝 ``` . 코드블록 밖에는 아무것도 출력하지 말 것.\n2) 코드 첫 두 줄은 반드시:\n   import sqlite3\n   import pandas as pd\n3) 파일 저장/자기 재실행/네트워크 호출 금지. stdout만 사용.\n4) 최종 출력은 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n\n[PRELUDE (필수 코드 헤더)]\n- 변수명 고정:\n  FILE = \"<file_name 그대로>\"\n  TBL_RAW = \"<table_name 그대로>\"\n  Q_TBL   = '\"' + TBL_RAW + '\"'\n- 파일 적재:\n  if FILE.lower().endswith(\".xlsx\"): df = pd.read_excel(FILE)\n  else: df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n- con = sqlite3.connect(\":memory:\")\n- df.to_sql(TBL_RAW, con, index=False)\n\n[SQL 문자열 형식]\n- f-string 금지. 아래 형식만 사용:\n  sql = '''\n<완성된 실제 SQL>\n'''.format(Q_TBL=Q_TBL)\n- 테이블 참조는 항상 FROM {Q_TBL} (또는 FROM {{Q_TBL}} 허용).\n- 식별자는 이중따옴표로 인용: \"category\",\"p_year\",\"p_month\",\"cnt\",\"base_ym\",\"sido\",\"sigungu\",\"age\",\"table_nm\",\"upjong\",\"gbn\".\n- DataFrame.query 금지. 모든 필터/집계는 SQL에서 수행.\n- 결과는 질문 의도에 맞는 **최소 열**만 포함하고, 명시적 ORDER BY 포함.\n\n[정규화/안전 규칙]\n- 합계는 항상 NULL 세이프:\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\n- 문자열 비교는 UPPER(TRIM(...)):\n  UPPER(TRIM(\"category\")), UPPER(TRIM(\"sido\")), UPPER(TRIM(\"sigungu\")), TRIM(\"base_ym\")\n- 지역 강건 매칭 예:\n  (UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  (UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\n- base_ym 정규화(YYYYMM):\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\n- 월 두 자리 고정: 4월 → '04' 같은 상수로 직접 기입.\n- 카테고리, 지역 등 별칭이 meta_description.value_alias로 정의된 경우 해당 목록을 모두 비교에 사용.\n\n[분기→월 전개(선언된 경우만)]\n- meta_description에서 base_is_quarterly=true인 경우, quarter_map과 quarter_policy에 따라 월 데이터로 전개.\n  - repeat_each_month: 분기 값을 각 월에 복제.\n  - use_last_month_of_quarter: 분기 마지막 달에만 값 배치.\n\n[의도 처리(일반 규칙)]\n- 질문에서 필요한 상수(연/월/연속 구간/지역/카테고리)를 추출해 **SQL 상수로 직접 기입**.\n- \"YYYY~YYYY\" 또는 \"YYYYMM~YYYYMM\" 범위는 BETWEEN으로 변환한다.\n- \"특정 시점 단일 값\"은 WHERE로 걸러 행이 없어지지 않게 **조건부 집계**로 한 행을 강제.\n- \"월별/연도별 추이\"는 GROUP BY + ORDER BY.\n- \"분포\"는 차원 열(age 등) + 합계.\n- \"전년 대비 증감률\"은 `(현재-이전)/NULLIF(이전,0)*100`으로 계산하여 별도 열로 출력.\n- 범위·월/연도 상수를 추출할 때는 숫자를 두 자리 월(예: 4월→'04')로 표준화한다.\n\n[EXAMPLE — 완전히 일반적인 절차만 시연(실제 데이터와 무관)]\n사용자 질문(예): \"2021년 1~3월, 국가=KOREA의 월별 매출 합계?\"\n가상의 스키마(예): [\"order_date\"(YYYY-MM-DD), \"country\", \"amount\"]\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"orders.csv\"\nTBL_RAW = \"orders\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 월(YYYY-MM) 추출 → 2021-01~03, 국가=KOREA, 월별 합계\nsql = '''\nWITH X AS (\n  SELECT\n    SUBSTR(TRIM(\"order_date\"),1,7) AS ym,\n    UPPER(TRIM(\"country\")) AS cty,\n    CAST(\"amount\" AS REAL) AS amt\n  FROM {Q_TBL}\n)\nSELECT\n  CAST(SUBSTR(ym,1,4) AS INT) AS year,\n  CAST(SUBSTR(ym,6,2) AS INT) AS month,\n  COALESCE(SUM(amt),0) AS total_amount\nFROM X\nWHERE ym BETWEEN '2021-01' AND '2021-03'\n  AND cty = 'KOREA'\nGROUP BY CAST(SUBSTR(ym,1,4) AS INT), CAST(SUBSTR(ym,6,2) AS INT)\nORDER BY year, month\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_Qwen\\Qwen3-32B\\exp_2\\test_2_1.py",
    "stdout": "age_range,cnt"
  },
  "_payload_var": "payload_2_1"
}