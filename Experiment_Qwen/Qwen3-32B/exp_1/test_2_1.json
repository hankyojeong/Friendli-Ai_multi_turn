{
  "question": "2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?",
  "llm_answer": "<think>\nOkay, let's tackle this user question. They want to know the age distribution of long-term foreign residents in Hwaseong-si, Gyeonggi province for April 2025. \n\nFirst, I need to make sure I understand the data schema. The table has columns like sido, sigungu, adong, gender, age, cert, nat_nm, cnt, base_ym, and gbn. The user is asking for age distribution, so the key columns here are age and cnt, along with the location and time.\n\nThe base_ym is probably the base year and month, which needs to be standardized. The user mentioned \"2025년 4월\", which translates to April 2025, so I'll need to match the base_ym to that. Since base_ym is stored as a string, I'll have to process it to fit the format. The example shows that it might be in YYYYMM format, so I'll convert it by removing any hyphens, underscores, or dots. For April 2025, the target would be '202504'.\n\nNext, the location is \"경기 화성시\". I need to make sure that the sido is Gyeonggi and the sigungu is Hwaseong. But sometimes, 'sido' might be stored as '경기' or '경기도', and 'sigungu' as '화성' or '화성시'. So using the TRIM and UPPER functions to standardize the comparisons is important. Conditions like UPPER(TRIM(\"sido\")) LIKE '경기%' and UPPER(TRIM(\"sigungu\")) LIKE '화성%' should cover possible variations.\n\nThe age field needs to be grouped by 'age' as is provided in the data, so I'll group by that column and sum the 'cnt' for each age group. Also, the 'gbn' column is mentioned in the meta_data, but the user didn't specify any particular category. Since the question is about long-term foreign residents, maybe 'gbn' should be checked if it's relevant. However, the user's question doesn't mention it, so perhaps it's safe to assume that 'gbn' can be ignored unless the table's metadata indicates it's necessary for filtering. Since the example doesn't mention it, I'll exclude it unless there's a need to filter further.\n\nThe table name is 2_tb_long_term_foreigners_by_region, so need to ensure that the SQL query references that correctly. The final output should have the age groups and their corresponding counts for April 2025 in Hwaseong-si, Gyeonggi.\n\nPossible edge cases: There might be multiple entries for the same age group in the same month. Aggregating by age and summing the counts would handle that. Also, if there are no records for a particular age, COALESCE is used to return 0 instead of NULL.\n\nPutting it all together: The SQL query selects the age and sums the cnt where the base_ym is '202504', the sido is Gyeonggi, and the sigungu is Hwaseong-si. Then it groups by age and orders by age to show the distribution.\n</think>\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"2_장기체류외국인_지역별_현황.csv\"\nTBL_RAW = \"2_tb_long_term_foreigners_by_region\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 202504 기준 경기화성시의 연령대별 통계\nsql = '''\nSELECT\n  TRIM(\"age\") AS age,\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\nFROM {Q_TBL}\nWHERE REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"), '-', ''), '_', ''), '.', '') = '202504'\n  AND (UPPER(TRIM(\"sido\")) = '경기' OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  AND (UPPER(TRIM(\"sigungu\")) = '화성' OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\nGROUP BY TRIM(\"age\")\nORDER BY TRIM(\"age\")\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. payload(메타+질문)를 보고,\n**오직 하나의** 파이썬 코드블록만 출력한다. 그 코드블록은 SQLite로 **단 하나의 SQL 쿼리**를 실행하고,\n그 결과만 stdout에 출력한다. 설명/해설/추가 텍스트 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 2_장기체류외국인_지역별_현황.csv\n- table_name = 2_tb_long_term_foreigners_by_region\n- description = 장기체류 외국인의 거소현황: 국적/체류자격/행정동/연령대 구분\n- meta_description =\n- table_nm, sido, sigungu, adong, gender, age, cert, nat_nm, cnt, base_ym, gbn\n- user_question = 2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?\n\n[HARD OUTPUT RULES]\n1) 출력은 정확히 하나의 코드블록: 시작 ```python, 끝 ``` . 코드블록 밖에는 아무것도 출력하지 말 것.\n2) 코드 첫 두 줄은 반드시:\n   import sqlite3\n   import pandas as pd\n3) 파일 저장/자기 재실행/네트워크 호출 금지. stdout만 사용.\n4) 최종 출력은 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n\n[PRELUDE (필수 코드 헤더)]\n- 변수명 고정:\n  FILE = \"<file_name 그대로>\"\n  TBL_RAW = \"<table_name 그대로>\"\n  Q_TBL   = '\"' + TBL_RAW + '\"'\n- 파일 적재:\n  if FILE.lower().endswith(\".xlsx\"): df = pd.read_excel(FILE)\n  else: df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n- con = sqlite3.connect(\":memory:\")\n- df.to_sql(TBL_RAW, con, index=False)\n\n[SQL 문자열 형식]\n- f-string 금지. 아래 형식만 사용:\n  sql = '''\n<완성된 실제 SQL>\n'''.format(Q_TBL=Q_TBL)\n- 테이블 참조는 항상 FROM {Q_TBL} (또는 FROM {{Q_TBL}} 허용).\n- 식별자는 이중따옴표로 인용: \"category\",\"p_year\",\"p_month\",\"cnt\",\"base_ym\",\"sido\",\"sigungu\",\"age\",\"table_nm\",\"upjong\",\"gbn\".\n- DataFrame.query 금지. 모든 필터/집계는 SQL에서 수행.\n- 결과는 질문 의도에 맞는 **최소 열**만 포함하고, 명시적 ORDER BY 포함.\n\n[정규화/안전 규칙]\n- 합계는 항상 NULL 세이프:\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\n- 문자열 비교는 UPPER(TRIM(...)):\n  UPPER(TRIM(\"category\")), UPPER(TRIM(\"sido\")), UPPER(TRIM(\"sigungu\")), TRIM(\"base_ym\")\n- 지역 강건 매칭 예:\n  (UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  (UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\n- base_ym 정규화(YYYYMM):\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\n- 월 두 자리 고정: 4월 → '04' 같은 상수로 직접 기입.\n- 카테고리 별칭(있다면 meta_description.category.alias로 확장):\n  \"장기체류\" → ['장기체류거소','장기체류등록'] 등.\n\n[분기→월 전개(선언된 경우만)]\n- meta_description.quarter_policy가 base_is_quarterly=true면, quarter_map을 사용해 월로 전개:\n  repeat_each_month 또는 use_last_month_of_quarter 정책을 따름.\n\n[의도 처리(일반 규칙)]\n- 질문에서 필요한 상수(연/월/연속 구간/지역/카테고리)를 추출해 **SQL 상수로 직접 기입**.\n- \"특정 시점 단일 값\"은 WHERE로 걸러 행이 없어지지 않게, **조건부 집계**로 한 행을 강제.\n- \"월별/연도별 추이\"는 GROUP BY + ORDER BY.\n- \"분포\"는 차원 열(age 등) + 합계.\n\n[EXAMPLE — 완전히 일반적인 절차만 시연(실제 데이터와 무관)]\n사용자 질문(예): \"2021년 1~3월, 국가=KOREA의 월별 매출 합계?\"\n가상의 스키마(예): [\"order_date\"(YYYY-MM-DD), \"country\", \"amount\"]\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"orders.csv\"\nTBL_RAW = \"orders\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 월(YYYY-MM) 추출 → 2021-01~03, 국가=KOREA, 월별 합계\nsql = '''\nWITH X AS (\n  SELECT\n    SUBSTR(TRIM(\"order_date\"),1,7) AS ym,\n    UPPER(TRIM(\"country\")) AS cty,\n    CAST(\"amount\" AS REAL) AS amt\n  FROM {Q_TBL}\n)\nSELECT\n  CAST(SUBSTR(ym,1,4) AS INT) AS year,\n  CAST(SUBSTR(ym,6,2) AS INT) AS month,\n  COALESCE(SUM(amt),0) AS total_amount\nFROM X\nWHERE ym BETWEEN '2021-01' AND '2021-03'\n  AND cty = 'KOREA'\nGROUP BY CAST(SUBSTR(ym,1,4) AS INT), CAST(SUBSTR(ym,6,2) AS INT)\nORDER BY year, month\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_Qwen\\Qwen3-32B\\exp_1\\test_2_1.py",
    "stdout": "age,cnt"
  },
  "_payload_var": "payload_2_1"
}