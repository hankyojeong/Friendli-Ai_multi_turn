{
  "question": "2024년 6월 경기 화성시의 장기체류 외국인 중 거소외국인의 연령대 분포?",
  "llm_answer": "<think>\nOkay, let's see. The user is asking for the age distribution of resident foreigners in Hwaseong-si, Gyeonggi-do for June 2024. The data is in the SQLite table 2_tb_long_term_foreigners_by_region.\n\nFirst, I need to identify the columns that will be used. The relevant columns are probably 'age' for the age group and 'cnt' for the count. The 'base_ym' should be the year-month, which in this case is 202406. Also, 'sido' should be Gyeonggi and 'sigungu' as Hwaseong. Also, 'gbn' might indicate the type, so I need to check if there's a code for resident foreigners.\n\nWait, the description says \"장기체류 외국인의 거소현황: 국적/체류자격/행정동/연령대 구분\". And the column 'gbn' is part of the table. So 'gbn' might need to be filtered. Since the user is asking for \"거소외국인\", I need to find the correct code for that. Maybe 'gbn' is the category code. If \"장기체류\" is the GBN, but the user is specifically asking for those under resident status. Maybe '장기체류' is the correct code. But the user wants \"거소외국인\", which might be a specific category under the GBN. Hmm, maybe 'gbn' is the category that includes whether they are resident or not. Alternatively, maybe 'gbn' is a code for the type of stay. If the original data uses '장기체류' as the GBN, but the user is looking for those who are \"거소\" (resident), perhaps the 'gbn' should be checked for the correct value. However, the user's question says \"장기체류 외국인 중 거소외국인\", which translates to long-term foreign nationals whose residence is in the area. Maybe 'gbn' is not the main filter here. Alternatively, maybe 'gbn' isn't necessary as long as the 'sido' and 'sigungu' are set, and 'base_ym' is correct. Let me check the meta description. The meta_description includes 'table_nm, sido, sigungu, adong, gender, age, cert, nat_nm, cnt, base_ym, gbn'. So 'gbn' is part of the table. The user is looking for those who are resident (거소) in the area during June 2024. If 'gbn' is the indicator for resident, but the original data might have a different code. However, the user's question doesn't mention filtering by 'gbn', but specifically asks for '거소외국인', which could be that the data is already structured such that 'gbn' isn't necessary for this query. Alternatively, maybe the 'gbn' is part of the filter. Since the user hasn't specified any particular 'gbn' code, but the data's description includes '장기체류' as the status, perhaps the 'gbn' is not needed here. Wait, the user is asking for 장기체류 (long-term) among them, so maybe the GBN is already considered as 장기체류. But the user is further specifying that they are resident (거소) in Hwaseong. Maybe 'gbn' is not directly relevant here and the key is the 'sido', 'sigungu', and 'base_ym'. Let's proceed under that assumption.\n\nNext, the 'base_ym' should be '202406'. The 'sido' is 경기 (Gyeonggi), and 'sigungu' is 화성시 (Hwaseong-si). So the SQL needs to filter rows where 'base_ym' is '202406', 'sido' is '경기' or '경기도', and 'sigungu' is '화성시' or similar variations. Also, the 'age' column is the age group we need to group by. The output should show each age group and their count. The 'cnt' should be summed. So the SQL will select 'age' and the sum of 'cnt', grouped by 'age', ordered by age. The columns to include are 'age' and the total count. Also, handling the normalization for sido and sigungu as per the rules. Need to use COALESCE and SUM for the counts. Also, make sure the query is case-insensitive and trims any extra spaces. Let me structure the SQL accordingly.\n\nSo the steps are: filter where base_ym is 202406, sido matches 'Gyeonggi' (via the uppercase and trim conditions), sigungu matches 'Hwaseong-si', then group by age, sum the cnt, and order by age. The final output should have age group and the count, ordered by age.\n</think>\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"2_장기체류외국인_지역별_현황.csv\"\nTBL_RAW = \"2_tb_long_term_foreigners_by_region\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 202406, Gyeonggi Hwaseong-si, age distribution of resident foreigners\nsql = '''\nSELECT\n  \"age\",\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS total\nFROM {Q_TBL}\nWHERE\n  TRIM(\"base_ym\") = '202406'\n  AND (\n    UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR \n    UPPER(TRIM(\"sido\")) LIKE '경기%'\n  )\n  AND (\n    UPPER(TRIM(\"sigungu\")) IN ('화성','화성시','화성시 ') OR \n    UPPER(TRIM(\"sigungu\")) LIKE '화성%'\n  )\n  AND TRIM(\"gbn\") IN ('장기체류')  -- source metadata classifies \"장기체류\"\nGROUP BY \"age\"\nORDER BY CAST(REPLACE(\"age\", '대', '') AS INT)\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. payload(메타+질문)를 보고,\n**오직 하나의** 파이썬 코드블록만 출력한다. 그 코드블록은 SQLite로 **단 하나의 SQL 쿼리**를 실행하고,\n그 결과만 stdout에 출력한다. 설명/해설/추가 텍스트 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 2_장기체류외국인_지역별_현황.csv\n- table_name = 2_tb_long_term_foreigners_by_region\n- description = 장기체류 외국인의 거소현황: 국적/체류자격/행정동/연령대 구분\n- meta_description =\n- table_nm, sido, sigungu, adong, gender, age, cert, nat_nm, cnt, base_ym, gbn\n- user_question = 2024년 6월 경기 화성시의 장기체류 외국인 중 거소외국인의 연령대 분포?\n\n[HARD OUTPUT RULES]\n1) 출력은 정확히 하나의 코드블록: 시작 ```python, 끝 ``` . 코드블록 밖에는 아무것도 출력하지 말 것.\n2) 코드 첫 두 줄은 반드시:\n   import sqlite3\n   import pandas as pd\n3) 파일 저장/자기 재실행/네트워크 호출 금지. stdout만 사용.\n4) 최종 출력은 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n\n[PRELUDE (필수 코드 헤더)]\n- 변수명 고정:\n  FILE = \"<file_name 그대로>\"\n  TBL_RAW = \"<table_name 그대로>\"\n  Q_TBL   = '\"' + TBL_RAW + '\"'\n- 파일 적재:\n  if FILE.lower().endswith(\".xlsx\"): df = pd.read_excel(FILE)\n  else: df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n- con = sqlite3.connect(\":memory:\")\n- df.to_sql(TBL_RAW, con, index=False)\n\n[SQL 문자열 형식]\n- f-string 금지. 아래 형식만 사용:\n  sql = '''\n<완성된 실제 SQL>\n'''.format(Q_TBL=Q_TBL)\n- 테이블 참조는 항상 FROM {Q_TBL} (또는 FROM {{Q_TBL}} 허용).\n- 식별자는 이중따옴표로 인용: \"category\",\"p_year\",\"p_month\",\"cnt\",\"base_ym\",\"sido\",\"sigungu\",\"age\",\"table_nm\",\"upjong\",\"gbn\".\n- DataFrame.query 금지. 모든 필터/집계는 SQL에서 수행.\n- 결과는 질문 의도에 맞는 **최소 열**만 포함하고, 명시적 ORDER BY 포함.\n\n[정규화/안전 규칙]\n- 합계는 항상 NULL 세이프:\n  COALESCE(SUM(CAST(\"cnt\" AS INT)), 0) AS cnt\n- 문자열 비교는 UPPER(TRIM(...)):\n  UPPER(TRIM(\"category\")), UPPER(TRIM(\"sido\")), UPPER(TRIM(\"sigungu\")), TRIM(\"base_ym\")\n- 지역 강건 매칭 예:\n  (UPPER(TRIM(\"sido\")) IN ('경기','경기도') OR UPPER(TRIM(\"sido\")) LIKE '경기%')\n  (UPPER(TRIM(\"sigungu\")) IN ('화성','화성시') OR UPPER(TRIM(\"sigungu\")) LIKE '화성%')\n- base_ym 정규화(YYYYMM):\n  REPLACE(REPLACE(REPLACE(TRIM(\"base_ym\"),'-',''),'_',''),'.','')\n- 월 두 자리 고정: 4월 → '04' 같은 상수로 직접 기입.\n- 카테고리 별칭(있다면 meta_description.category.alias로 확장):\n  \"장기체류\" → ['장기체류거소','장기체류등록'] 등.\n\n[분기→월 전개(선언된 경우만)]\n- meta_description.quarter_policy가 base_is_quarterly=true면, quarter_map을 사용해 월로 전개:\n  repeat_each_month 또는 use_last_month_of_quarter 정책을 따름.\n\n[의도 처리(일반 규칙)]\n- 질문에서 필요한 상수(연/월/연속 구간/지역/카테고리)를 추출해 **SQL 상수로 직접 기입**.\n- \"특정 시점 단일 값\"은 WHERE로 걸러 행이 없어지지 않게, **조건부 집계**로 한 행을 강제.\n- \"월별/연도별 추이\"는 GROUP BY + ORDER BY.\n- \"분포\"는 차원 열(age 등) + 합계.\n\n[EXAMPLE — 완전히 일반적인 절차만 시연(실제 데이터와 무관)]\n사용자 질문(예): \"2021년 1~3월, 국가=KOREA의 월별 매출 합계?\"\n가상의 스키마(예): [\"order_date\"(YYYY-MM-DD), \"country\", \"amount\"]\n\n```python\nimport sqlite3\nimport pandas as pd\n\nFILE = \"orders.csv\"\nTBL_RAW = \"orders\"\nQ_TBL = '\"' + TBL_RAW + '\"'\n\n# load\nif FILE.lower().endswith(\".xlsx\"):\n    df = pd.read_excel(FILE)\nelse:\n    df = pd.read_csv(FILE, encoding=\"utf-8-sig\", low_memory=False)\n\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# SQL: 월(YYYY-MM) 추출 → 2021-01~03, 국가=KOREA, 월별 합계\nsql = '''\nWITH X AS (\n  SELECT\n    SUBSTR(TRIM(\"order_date\"),1,7) AS ym,\n    UPPER(TRIM(\"country\")) AS cty,\n    CAST(\"amount\" AS REAL) AS amt\n  FROM {Q_TBL}\n)\nSELECT\n  CAST(SUBSTR(ym,1,4) AS INT) AS year,\n  CAST(SUBSTR(ym,6,2) AS INT) AS month,\n  COALESCE(SUM(amt),0) AS total_amount\nFROM X\nWHERE ym BETWEEN '2021-01' AND '2021-03'\n  AND cty = 'KOREA'\nGROUP BY CAST(SUBSTR(ym,1,4) AS INT), CAST(SUBSTR(ym,6,2) AS INT)\nORDER BY year, month\n'''.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_Qwen\\Qwen3-32B\\exp_1\\test_2_2.py",
    "stdout": "age,total"
  },
  "_payload_var": "payload_2_2"
}