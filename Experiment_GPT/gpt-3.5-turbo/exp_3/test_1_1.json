{
  "question": "2025년 4월 기준 국내 단기 체류 외국인 수는?",
  "llm_answer": "```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"1_국내체류외국인.xlsx\"\nTBL_RAW = \"1_tb_resident_foreigners\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\nSELECT SUM(cnt) as total_cnt\nFROM {Q_TBL}\nWHERE category = '단기체류' and p_year = 2025 and p_month = 4\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```  ",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. 오직 하나의 코드블록만 출력하고, 단 하나의 SQL을 실행한다.\n\n[HARD OUTPUT RULES]\n1) 출력은 단 하나의 ```python 코드블록```.\n2) 첫 두 줄: import sqlite3 / import pandas as pd\n3) 파일 저장·네트워크 호출 금지, stdout만 사용.\n4) 결과는 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n5) 식별자는 항상 이중따옴표, 테이블 참조는 FROM {Q_TBL} 또는 FROM {{Q_TBL}}.\n6) **PLACEHOLDER 금지**: FILE/TBL_RAW는 payload 실제 문자열.\n7) **지연 포맷 강제**: `sql_template`에 쿼리 원문을 담고, **반드시** 나중에 `sql = sql_template.format(Q_TBL=Q_TBL)`로 포맷한다. `'''...'''.format(...)` 한 줄 완성은 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 1_국내체류외국인.xlsx\n- table_name = 1_tb_resident_foreigners\n- description = 국내 체류하고 있는 외국인을 단기체류, 등록외국인, 외국국적동포_거소신고의 3개 카테고리로 구분하고, 각 카테고리별 외국인 수를 월별로 집계한 데이터\n- meta_description =\n\nschema:\n  category: str   # {'단기체류','장기체류거소','장기체류등록'}\n  cnt: int        # 인원수\n  p_year: int     # 예: 2022, 2023, 2024, 2025\n  p_month: int    # 1~12\n\nvalue_alias:\n  # 질문/사용자 표현을 실제 값으로 정규화\n  장기체류: ['장기체류거소','장기체류등록']   # 합산 대상으로 해석\n  등록외국인: ['장기체류등록']\n  외국국적동포_거소신고: ['장기체류거소']\n\npolicies:\n  categories_disjoint: true        # 서로 겹치지 않음 → 합산 안전\n  long_term_policy: sum            # alias가 다수이면 SUM으로 집계\n  time_order: ['p_year','p_month'] # 시계열 정렬 기준\n\nnotes:\n  - 숫자/특수문자로 시작하는 식별자는 SQLite에서 \"...\"로 인용\n  - dtype 강제: cnt,p_year,p_month는 숫자형으로 캐스팅 후 사용\n\n- user_question = 2025년 4월 기준 국내 단기 체류 외국인 수는?\n\n[SKELETON]\n```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"<payload file_name>\"\nTBL_RAW = \"<payload table_name>\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\n<여기에 완성된 실제 SQL 원문(단, FROM {Q_TBL} 사용). f-string 금지.>\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_GPT\\gpt-3.5-turbo\\exp_3\\test_1_1.py",
    "stdout": "total_cnt\r\n\"\""
  },
  "_payload_var": "payload_1_1"
}