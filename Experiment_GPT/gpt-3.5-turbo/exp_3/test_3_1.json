{
  "question": "(E-9)국내 외국인 근로자의 월별 추이는?",
  "llm_answer": "```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"3_외국인근로자.xlsx\"\nTBL_RAW = \"3_tb_foreign_workers_permit\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\nSELECT base_ym, SUM(cnt) as total_foreign_workers\nFROM {Q_TBL}\nGROUP BY base_ym\nORDER BY base_ym\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. 오직 하나의 코드블록만 출력하고, 단 하나의 SQL을 실행한다.\n\n[HARD OUTPUT RULES]\n1) 출력은 단 하나의 ```python 코드블록```.\n2) 첫 두 줄: import sqlite3 / import pandas as pd\n3) 파일 저장·네트워크 호출 금지, stdout만 사용.\n4) 결과는 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n5) 식별자는 항상 이중따옴표, 테이블 참조는 FROM {Q_TBL} 또는 FROM {{Q_TBL}}.\n6) **PLACEHOLDER 금지**: FILE/TBL_RAW는 payload 실제 문자열.\n7) **지연 포맷 강제**: `sql_template`에 쿼리 원문을 담고, **반드시** 나중에 `sql = sql_template.format(Q_TBL=Q_TBL)`로 포맷한다. `'''...'''.format(...)` 한 줄 완성은 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 3_외국인근로자.xlsx\n- table_name = 3_tb_foreign_workers_permit\n- description = 비전문취업(E-9) 비자를 가진 외국인 근로자의 업종/지역별 분포를 분기별로 집계한 데이터\n- meta_description =\n\n- base_ym: 기준년월 (문자형)\n- sido: 시도 (문자형)\n- upjong: 업종 (문자형)\n- cnt: 외국인 수 (정수형)\n\nbase_is_quarterly: true\nquarter_policy: repeat_each_month\nquarter_map:\n  1Q: ['01','02','03']\n  2Q: ['04','05','06']\n  3Q: ['07','08','09']\n  4Q: ['10','11','12']\n\n- user_question = (E-9)국내 외국인 근로자의 월별 추이는?\n\n[SKELETON]\n```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"<payload file_name>\"\nTBL_RAW = \"<payload table_name>\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\n<여기에 완성된 실제 SQL 원문(단, FROM {Q_TBL} 사용). f-string 금지.>\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_GPT\\gpt-3.5-turbo\\exp_3\\test_3_1.py",
    "stdout": "base_ym,total_foreign_workers\r\n202203,161921\r\n202206,163886\r\n202209,181247\r\n202212,203121\r\n202303,211361\r\n202306,225307\r\n202309,237846\r\n202312,247191\r\n202403,260047\r\n202406,260073\r\n202409,267452\r\n202412,271925\r\n202503,273139"
  },
  "_payload_var": "payload_3_1"
}