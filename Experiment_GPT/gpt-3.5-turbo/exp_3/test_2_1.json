{
  "question": "2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?",
  "llm_answer": "```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"2_장기체류외국인_지역별_현황.csv\"\nTBL_RAW = \"2_tb_long_term_foreigners_by_region\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\nSELECT age,\n       SUM(cnt) AS cnt\nFROM {Q_TBL}\nWHERE sido IN ('경기도', '경기')\n      AND sigungu IN ('화성시', '화성')\n      AND base_ym = '202504'\nGROUP BY age\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n```",
  "system_prompt": "[ROLE]\n너는 \"Python+SQLite 단일 쿼리 결과 봇\"이다. 오직 하나의 코드블록만 출력하고, 단 하나의 SQL을 실행한다.\n\n[HARD OUTPUT RULES]\n1) 출력은 단 하나의 ```python 코드블록```.\n2) 첫 두 줄: import sqlite3 / import pandas as pd\n3) 파일 저장·네트워크 호출 금지, stdout만 사용.\n4) 결과는 print(out.to_csv(index=False)) 또는 print(out.to_string(index=False)).\n5) 식별자는 항상 이중따옴표, 테이블 참조는 FROM {Q_TBL} 또는 FROM {{Q_TBL}}.\n6) **PLACEHOLDER 금지**: FILE/TBL_RAW는 payload 실제 문자열.\n7) **지연 포맷 강제**: `sql_template`에 쿼리 원문을 담고, **반드시** 나중에 `sql = sql_template.format(Q_TBL=Q_TBL)`로 포맷한다. `'''...'''.format(...)` 한 줄 완성은 금지.\n\n[PAYLOAD INPUTS]\n- file_name = 2_장기체류외국인_지역별_현황.csv\n- table_name = 2_tb_long_term_foreigners_by_region\n- description = 장기체류 외국인 중 등록외국인과 외국국적동포의 거소현황을 집계한 데이터. table_nm 컬럼을 기준으로 국적(1), 체류자격(2), 행정동(3), 연령대(4)로 구분되어 있음.\n- meta_description =\n\n- table_nm: 원본 테이블명 (문자형) (데이터 구분용: 1.국적, 2.체류자격, 3.행정동, 4.연령대)\n- sido: 시도 (문자형)\n- sigungu: 시군구 (문자형)\n- adong: 행정동 (문자형)\n- gender: 성별 (문자형)\n- age: 나이 (문자형)\n- cert: 체류자격 (문자형)\n- nat_nm: 국적 (문자형)\n- cnt: 외국인 수 (정수형)\n- base_ym: 기준년월 (문자형)\n- gbn: 장기체류구분 (문자형)\n\nvalue_alias:\n  sido:\n    경기: ['경기도', '경기']\n  sigungu:\n    화성: ['화성시', '화성']\n  gbn:\n    거소외국인: ['외국국적동포']\n    등록외국인: ['등록외국인']\n  age:\n    age value들을보고 '0~9세', '10~19세', ..., '70~79세', '80세이상' 으로 알아서 재 분류.     \n\npolicies:\n  region_match: use_upper_trim\n  table_nm_age: '4'\n\n- user_question = 2025년 4월 경기 화성시의 장기체류 외국인 연령대 분포?\n\n[SKELETON]\n```python\nimport sqlite3\nimport pandas as pd\n\n# [S1] PRELUDE (payload 값 그대로; placeholder 금지)\nFILE = r\"<payload file_name>\"\nTBL_RAW = \"<payload table_name>\"\nQ_TBL   = '\"' + TBL_RAW + '\"'\n\n# [S2] LOAD\nimport os\nif not os.path.isabs(FILE) and not os.path.exists(FILE):\n    for _p in [FILE, os.path.join(\"data\", FILE), os.path.join(\"..\",\"data\",FILE),\n               os.path.join(\"..\", FILE), os.path.join(\"..\",\"..\",\"data\",FILE)]:\n        if os.path.exists(_p):\n            FILE = _p; break\n\ndef _try_read(p):\n    lo = p.lower()\n    if lo.endswith((\".xlsx\",\".xls\")):\n        try: return pd.read_excel(p)\n        except Exception:\n            csvp = os.path.splitext(p)[0]+\".csv\"\n            if os.path.exists(csvp):\n                return pd.read_csv(csvp, encoding=\"utf-8-sig\", low_memory=False)\n            raise\n    return pd.read_csv(p, encoding=\"utf-8-sig\", low_memory=False)\n\ndf = _try_read(FILE)\ncon = sqlite3.connect(\":memory:\")\ndf.to_sql(TBL_RAW, con, index=False)\n\n# [S3] SQL —— 반드시 2단계(지연 포맷)\nsql_template = '''\n<여기에 완성된 실제 SQL 원문(단, FROM {Q_TBL} 사용). f-string 금지.>\n'''\nsql = sql_template.format(Q_TBL=Q_TBL)\n\nout = pd.read_sql_query(sql, con)\nprint(out.to_csv(index=False))\n",
  "_runtime": {
    "py_path": "C:\\Users\\hanky\\OneDrive\\Desktop\\서울대학교\\IDEA 연구실\\LLM\\Friendli AI\\Experiment_GPT\\gpt-3.5-turbo\\exp_3\\test_2_1.py",
    "stdout": "age,cnt"
  },
  "_payload_var": "payload_2_1"
}